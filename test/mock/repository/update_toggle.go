// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/update_toggle.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUpdateToggleDatabase is a mock of UpdateToggleDatabase interface.
type MockUpdateToggleDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateToggleDatabaseMockRecorder
}

// MockUpdateToggleDatabaseMockRecorder is the mock recorder for MockUpdateToggleDatabase.
type MockUpdateToggleDatabaseMockRecorder struct {
	mock *MockUpdateToggleDatabase
}

// NewMockUpdateToggleDatabase creates a new mock instance.
func NewMockUpdateToggleDatabase(ctrl *gomock.Controller) *MockUpdateToggleDatabase {
	mock := &MockUpdateToggleDatabase{ctrl: ctrl}
	mock.recorder = &MockUpdateToggleDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateToggleDatabase) EXPECT() *MockUpdateToggleDatabaseMockRecorder {
	return m.recorder
}

// UpdateIsEnabled mocks base method.
func (m *MockUpdateToggleDatabase) UpdateIsEnabled(ctx context.Context, key string, value bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIsEnabled", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIsEnabled indicates an expected call of UpdateIsEnabled.
func (mr *MockUpdateToggleDatabaseMockRecorder) UpdateIsEnabled(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIsEnabled", reflect.TypeOf((*MockUpdateToggleDatabase)(nil).UpdateIsEnabled), ctx, key, value)
}

// MockUpdateToggleCache is a mock of UpdateToggleCache interface.
type MockUpdateToggleCache struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateToggleCacheMockRecorder
}

// MockUpdateToggleCacheMockRecorder is the mock recorder for MockUpdateToggleCache.
type MockUpdateToggleCacheMockRecorder struct {
	mock *MockUpdateToggleCache
}

// NewMockUpdateToggleCache creates a new mock instance.
func NewMockUpdateToggleCache(ctrl *gomock.Controller) *MockUpdateToggleCache {
	mock := &MockUpdateToggleCache{ctrl: ctrl}
	mock.recorder = &MockUpdateToggleCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateToggleCache) EXPECT() *MockUpdateToggleCacheMockRecorder {
	return m.recorder
}

// SetIsEnabled mocks base method.
func (m *MockUpdateToggleCache) SetIsEnabled(ctx context.Context, key string, value bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIsEnabled", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetIsEnabled indicates an expected call of SetIsEnabled.
func (mr *MockUpdateToggleCacheMockRecorder) SetIsEnabled(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIsEnabled", reflect.TypeOf((*MockUpdateToggleCache)(nil).SetIsEnabled), ctx, key, value)
}
