// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/toggle_enabler.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEnableToggle is a mock of EnableToggle interface.
type MockEnableToggle struct {
	ctrl     *gomock.Controller
	recorder *MockEnableToggleMockRecorder
}

// MockEnableToggleMockRecorder is the mock recorder for MockEnableToggle.
type MockEnableToggleMockRecorder struct {
	mock *MockEnableToggle
}

// NewMockEnableToggle creates a new mock instance.
func NewMockEnableToggle(ctrl *gomock.Controller) *MockEnableToggle {
	mock := &MockEnableToggle{ctrl: ctrl}
	mock.recorder = &MockEnableToggleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnableToggle) EXPECT() *MockEnableToggleMockRecorder {
	return m.recorder
}

// Enable mocks base method.
func (m *MockEnableToggle) Enable(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enable", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enable indicates an expected call of Enable.
func (mr *MockEnableToggleMockRecorder) Enable(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enable", reflect.TypeOf((*MockEnableToggle)(nil).Enable), ctx, key)
}

// MockEnableToggleRepository is a mock of EnableToggleRepository interface.
type MockEnableToggleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEnableToggleRepositoryMockRecorder
}

// MockEnableToggleRepositoryMockRecorder is the mock recorder for MockEnableToggleRepository.
type MockEnableToggleRepositoryMockRecorder struct {
	mock *MockEnableToggleRepository
}

// NewMockEnableToggleRepository creates a new mock instance.
func NewMockEnableToggleRepository(ctrl *gomock.Controller) *MockEnableToggleRepository {
	mock := &MockEnableToggleRepository{ctrl: ctrl}
	mock.recorder = &MockEnableToggleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnableToggleRepository) EXPECT() *MockEnableToggleRepositoryMockRecorder {
	return m.recorder
}

// Enable mocks base method.
func (m *MockEnableToggleRepository) Enable(ctx context.Context, key string, value bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enable", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enable indicates an expected call of Enable.
func (mr *MockEnableToggleRepositoryMockRecorder) Enable(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enable", reflect.TypeOf((*MockEnableToggleRepository)(nil).Enable), ctx, key, value)
}
