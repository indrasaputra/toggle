name: Test

on: [push, pull_request]
  
jobs:
  # go-code-lint:
  #   name: lint using golangci
  #   if: github.event_name == 'push'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: checkout repo 
  #       uses: actions/checkout@v2
  #     - name: golangci-lint
  #       uses: golangci/golangci-lint-action@v2
  #       with:
  #         version: v1.38.0

  # migration-lint:
  #   name: validate migration file's name
  #   if: github.event_name == 'push'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: checkout repo
  #       uses: actions/checkout@v2
  #     - name: validate migration file's name      
  #       run: make validate-migration

  # import-lint:
  #   name: lint import block
  #   if: github.event_name == 'push'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: setup go
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: ^1.16.x
  #     - name: checkout repo
  #       uses: actions/checkout@v2
  #     - name: check import block
  #       run: make check-import

  # proto-code-format:
  #   name: format proto using clang-format
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: checkout repo
  #       uses: actions/checkout@v2
  #     - name: format proto files
  #       uses: DoozyX/clang-format-lint-action@v0.11
  #       with:
  #         source: '.'
  #         extensions: 'proto'
  #         clangFormatVersion: 11

  # unit-test:
  #   name: unit test and coverage
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: setup go
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: ^1.16.x
  #     - name: checkout repo
  #       uses: actions/checkout@v2
  #     - name: run unit test and coverage 
  #       run: make cover
  #     - name: push result to codecov
  #       uses: codecov/codecov-action@v1.0.13

  # build-docker:
  #   name: build and push docker image
  #   runs-on: ubuntu-latest
  #   container:
  #     image: docker:dind
  #   steps:
  #     - name: checkout repo
  #       uses: actions/checkout@v2
  #     - name: build and push image
  #       run: |
  #         docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_TOKEN }}
  #         docker build --no-cache -t ${{ github.repository }}:${{ github.sha }} -f Dockerfile .
  #         docker push ${{ github.repository }}:${{ github.sha }}

  api-test:
    name: api test
    if: github.event_name == 'push'
    # needs: [build-docker]
    runs-on: ubuntu-latest
    env:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgresuser
      POSTGRES_PASSWORD: postgrespassword
      POSTGRES_NAME: toggle
    # services:
    #   postgres:
    #     image: postgres:13.2-alpine
    #     env:
    #       POSTGRES_USER: postgresuser
    #       POSTGRES_PASSWORD: postgrespassword
    #       POSTGRES_DB: toggle
    #     ports:
    #       - 5432:5432
    #     options: >-
    #       --health-cmd pg_isready
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 5
    #   redis:
    #     image: redis:6.2-alpine
    #     ports:
    #       - 6379:6379
    #     options: >-
    #       --health-cmd "redis-cli ping"
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 5
    #   toggle:
    #     image: indrasaputra/toggle:162759d5b0c0545c7048bb31da86144665fe382a
    #     env:
    #       PORT_GRPC: 8080
    #       PORT_REST: 8081
    #       POSTGRES_HOST: postgres
    #       POSTGRES_PORT: 5432
    #       POSTGRES_USER: postgresuser
    #       POSTGRES_PASSWORD: postgrespassword
    #       POSTGRES_NAME: toggle
    #       POSTGRES_MAX_OPEN_CONNS: 50
    #       POSTGRES_MAX_CONN_LIFETIME: 10m
    #       POSTGRES_MAX_IDLE_LIFETIME: 5m
    #       REDIS_ADDRESS: redis:6379
    #       REDIS_TTL: 5
    #     ports:
    #       - 8080:8080
    #       - 8081:8081
    #     options: >-
    #       --health-cmd "./wait-for -t 4 localhost:8081"
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 5
    steps:
      - name: checkout repo
        uses: actions/checkout@v2
      - name: setup go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.16.x
      - name: install golang-migrate
        run: |
          curl -sSL https://packagecloud.io/golang-migrate/migrate/gpgkey | apt-key add -
          echo "deb https://packagecloud.io/golang-migrate/migrate/ubuntu/ bionic main" > /etc/apt/sources.list.d/migrate.list
          apt-get update && apt-get install -y migrate
      - name: run api test
        run: |
          make migrate url="postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_NAME}"
