// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/toggle_getter.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	entity "github.com/indrasaputra/toggle/entity"
)

// MockGetToggle is a mock of GetToggle interface.
type MockGetToggle struct {
	ctrl     *gomock.Controller
	recorder *MockGetToggleMockRecorder
}

// MockGetToggleMockRecorder is the mock recorder for MockGetToggle.
type MockGetToggleMockRecorder struct {
	mock *MockGetToggle
}

// NewMockGetToggle creates a new mock instance.
func NewMockGetToggle(ctrl *gomock.Controller) *MockGetToggle {
	mock := &MockGetToggle{ctrl: ctrl}
	mock.recorder = &MockGetToggleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetToggle) EXPECT() *MockGetToggleMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockGetToggle) GetAll(ctx context.Context) ([]*entity.Toggle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*entity.Toggle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockGetToggleMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockGetToggle)(nil).GetAll), ctx)
}

// GetByKey mocks base method.
func (m *MockGetToggle) GetByKey(ctx context.Context, key string) (*entity.Toggle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByKey", ctx, key)
	ret0, _ := ret[0].(*entity.Toggle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByKey indicates an expected call of GetByKey.
func (mr *MockGetToggleMockRecorder) GetByKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByKey", reflect.TypeOf((*MockGetToggle)(nil).GetByKey), ctx, key)
}

// MockGetToggleRepository is a mock of GetToggleRepository interface.
type MockGetToggleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGetToggleRepositoryMockRecorder
}

// MockGetToggleRepositoryMockRecorder is the mock recorder for MockGetToggleRepository.
type MockGetToggleRepositoryMockRecorder struct {
	mock *MockGetToggleRepository
}

// NewMockGetToggleRepository creates a new mock instance.
func NewMockGetToggleRepository(ctrl *gomock.Controller) *MockGetToggleRepository {
	mock := &MockGetToggleRepository{ctrl: ctrl}
	mock.recorder = &MockGetToggleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetToggleRepository) EXPECT() *MockGetToggleRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockGetToggleRepository) GetAll(ctx context.Context) ([]*entity.Toggle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*entity.Toggle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockGetToggleRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockGetToggleRepository)(nil).GetAll), ctx)
}

// GetByKey mocks base method.
func (m *MockGetToggleRepository) GetByKey(ctx context.Context, key string) (*entity.Toggle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByKey", ctx, key)
	ret0, _ := ret[0].(*entity.Toggle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByKey indicates an expected call of GetByKey.
func (mr *MockGetToggleRepositoryMockRecorder) GetByKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByKey", reflect.TypeOf((*MockGetToggleRepository)(nil).GetByKey), ctx, key)
}
