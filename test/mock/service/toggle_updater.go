// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/toggle_updater.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUpdateToggle is a mock of UpdateToggle interface
type MockUpdateToggle struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateToggleMockRecorder
}

// MockUpdateToggleMockRecorder is the mock recorder for MockUpdateToggle
type MockUpdateToggleMockRecorder struct {
	mock *MockUpdateToggle
}

// NewMockUpdateToggle creates a new mock instance
func NewMockUpdateToggle(ctrl *gomock.Controller) *MockUpdateToggle {
	mock := &MockUpdateToggle{ctrl: ctrl}
	mock.recorder = &MockUpdateToggleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpdateToggle) EXPECT() *MockUpdateToggleMockRecorder {
	return m.recorder
}

// Enable mocks base method
func (m *MockUpdateToggle) Enable(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enable", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enable indicates an expected call of Enable
func (mr *MockUpdateToggleMockRecorder) Enable(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enable", reflect.TypeOf((*MockUpdateToggle)(nil).Enable), ctx, key)
}

// Disable mocks base method
func (m *MockUpdateToggle) Disable(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disable", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disable indicates an expected call of Disable
func (mr *MockUpdateToggleMockRecorder) Disable(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable", reflect.TypeOf((*MockUpdateToggle)(nil).Disable), ctx, key)
}

// MockUpdateToggleRepository is a mock of UpdateToggleRepository interface
type MockUpdateToggleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateToggleRepositoryMockRecorder
}

// MockUpdateToggleRepositoryMockRecorder is the mock recorder for MockUpdateToggleRepository
type MockUpdateToggleRepositoryMockRecorder struct {
	mock *MockUpdateToggleRepository
}

// NewMockUpdateToggleRepository creates a new mock instance
func NewMockUpdateToggleRepository(ctrl *gomock.Controller) *MockUpdateToggleRepository {
	mock := &MockUpdateToggleRepository{ctrl: ctrl}
	mock.recorder = &MockUpdateToggleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpdateToggleRepository) EXPECT() *MockUpdateToggleRepositoryMockRecorder {
	return m.recorder
}

// UpdateIsEnabled mocks base method
func (m *MockUpdateToggleRepository) UpdateIsEnabled(ctx context.Context, key string, value bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIsEnabled", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIsEnabled indicates an expected call of UpdateIsEnabled
func (mr *MockUpdateToggleRepositoryMockRecorder) UpdateIsEnabled(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIsEnabled", reflect.TypeOf((*MockUpdateToggleRepository)(nil).UpdateIsEnabled), ctx, key, value)
}
