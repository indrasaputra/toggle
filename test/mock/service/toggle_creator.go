// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/toggle_creator.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	entity "github.com/indrasaputra/toggle/entity"
	togglev1 "github.com/indrasaputra/toggle/proto/toggle/v1"
)

// MockCreateToggle is a mock of CreateToggle interface.
type MockCreateToggle struct {
	ctrl     *gomock.Controller
	recorder *MockCreateToggleMockRecorder
}

// MockCreateToggleMockRecorder is the mock recorder for MockCreateToggle.
type MockCreateToggleMockRecorder struct {
	mock *MockCreateToggle
}

// NewMockCreateToggle creates a new mock instance.
func NewMockCreateToggle(ctrl *gomock.Controller) *MockCreateToggle {
	mock := &MockCreateToggle{ctrl: ctrl}
	mock.recorder = &MockCreateToggleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateToggle) EXPECT() *MockCreateToggleMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCreateToggle) Create(ctx context.Context, toggle *entity.Toggle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, toggle)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCreateToggleMockRecorder) Create(ctx, toggle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCreateToggle)(nil).Create), ctx, toggle)
}

// MockCreateToggleRepository is a mock of CreateToggleRepository interface.
type MockCreateToggleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCreateToggleRepositoryMockRecorder
}

// MockCreateToggleRepositoryMockRecorder is the mock recorder for MockCreateToggleRepository.
type MockCreateToggleRepositoryMockRecorder struct {
	mock *MockCreateToggleRepository
}

// NewMockCreateToggleRepository creates a new mock instance.
func NewMockCreateToggleRepository(ctrl *gomock.Controller) *MockCreateToggleRepository {
	mock := &MockCreateToggleRepository{ctrl: ctrl}
	mock.recorder = &MockCreateToggleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateToggleRepository) EXPECT() *MockCreateToggleRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockCreateToggleRepository) Insert(ctx context.Context, toggle *entity.Toggle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, toggle)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockCreateToggleRepositoryMockRecorder) Insert(ctx, toggle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCreateToggleRepository)(nil).Insert), ctx, toggle)
}

// MockTogglePublisher is a mock of TogglePublisher interface.
type MockTogglePublisher struct {
	ctrl     *gomock.Controller
	recorder *MockTogglePublisherMockRecorder
}

// MockTogglePublisherMockRecorder is the mock recorder for MockTogglePublisher.
type MockTogglePublisherMockRecorder struct {
	mock *MockTogglePublisher
}

// NewMockTogglePublisher creates a new mock instance.
func NewMockTogglePublisher(ctrl *gomock.Controller) *MockTogglePublisher {
	mock := &MockTogglePublisher{ctrl: ctrl}
	mock.recorder = &MockTogglePublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTogglePublisher) EXPECT() *MockTogglePublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockTogglePublisher) Publish(ctx context.Context, event *togglev1.ToggleEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockTogglePublisherMockRecorder) Publish(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockTogglePublisher)(nil).Publish), ctx, event)
}
