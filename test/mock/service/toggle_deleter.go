// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/toggle_deleter.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	entity "github.com/indrasaputra/toggle/entity"
)

// MockDeleteToggle is a mock of DeleteToggle interface
type MockDeleteToggle struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteToggleMockRecorder
}

// MockDeleteToggleMockRecorder is the mock recorder for MockDeleteToggle
type MockDeleteToggleMockRecorder struct {
	mock *MockDeleteToggle
}

// NewMockDeleteToggle creates a new mock instance
func NewMockDeleteToggle(ctrl *gomock.Controller) *MockDeleteToggle {
	mock := &MockDeleteToggle{ctrl: ctrl}
	mock.recorder = &MockDeleteToggleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeleteToggle) EXPECT() *MockDeleteToggleMockRecorder {
	return m.recorder
}

// DeleteByKey mocks base method
func (m *MockDeleteToggle) DeleteByKey(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByKey", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByKey indicates an expected call of DeleteByKey
func (mr *MockDeleteToggleMockRecorder) DeleteByKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByKey", reflect.TypeOf((*MockDeleteToggle)(nil).DeleteByKey), ctx, key)
}

// MockDeleteToggleRepository is a mock of DeleteToggleRepository interface
type MockDeleteToggleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteToggleRepositoryMockRecorder
}

// MockDeleteToggleRepositoryMockRecorder is the mock recorder for MockDeleteToggleRepository
type MockDeleteToggleRepositoryMockRecorder struct {
	mock *MockDeleteToggleRepository
}

// NewMockDeleteToggleRepository creates a new mock instance
func NewMockDeleteToggleRepository(ctrl *gomock.Controller) *MockDeleteToggleRepository {
	mock := &MockDeleteToggleRepository{ctrl: ctrl}
	mock.recorder = &MockDeleteToggleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeleteToggleRepository) EXPECT() *MockDeleteToggleRepositoryMockRecorder {
	return m.recorder
}

// GetByKey mocks base method
func (m *MockDeleteToggleRepository) GetByKey(ctx context.Context, key string) (*entity.Toggle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByKey", ctx, key)
	ret0, _ := ret[0].(*entity.Toggle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByKey indicates an expected call of GetByKey
func (mr *MockDeleteToggleRepositoryMockRecorder) GetByKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByKey", reflect.TypeOf((*MockDeleteToggleRepository)(nil).GetByKey), ctx, key)
}

// DeleteByKey mocks base method
func (m *MockDeleteToggleRepository) DeleteByKey(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByKey", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByKey indicates an expected call of DeleteByKey
func (mr *MockDeleteToggleRepositoryMockRecorder) DeleteByKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByKey", reflect.TypeOf((*MockDeleteToggleRepository)(nil).DeleteByKey), ctx, key)
}
