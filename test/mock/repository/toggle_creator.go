// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/toggle_creator.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	entity "github.com/indrasaputra/toggle/entity"
)

// MockInsertToggleDatabase is a mock of InsertToggleDatabase interface.
type MockInsertToggleDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockInsertToggleDatabaseMockRecorder
}

// MockInsertToggleDatabaseMockRecorder is the mock recorder for MockInsertToggleDatabase.
type MockInsertToggleDatabaseMockRecorder struct {
	mock *MockInsertToggleDatabase
}

// NewMockInsertToggleDatabase creates a new mock instance.
func NewMockInsertToggleDatabase(ctrl *gomock.Controller) *MockInsertToggleDatabase {
	mock := &MockInsertToggleDatabase{ctrl: ctrl}
	mock.recorder = &MockInsertToggleDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInsertToggleDatabase) EXPECT() *MockInsertToggleDatabaseMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockInsertToggleDatabase) Insert(ctx context.Context, toggle *entity.Toggle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, toggle)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockInsertToggleDatabaseMockRecorder) Insert(ctx, toggle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockInsertToggleDatabase)(nil).Insert), ctx, toggle)
}

// MockSetToggleCache is a mock of SetToggleCache interface.
type MockSetToggleCache struct {
	ctrl     *gomock.Controller
	recorder *MockSetToggleCacheMockRecorder
}

// MockSetToggleCacheMockRecorder is the mock recorder for MockSetToggleCache.
type MockSetToggleCacheMockRecorder struct {
	mock *MockSetToggleCache
}

// NewMockSetToggleCache creates a new mock instance.
func NewMockSetToggleCache(ctrl *gomock.Controller) *MockSetToggleCache {
	mock := &MockSetToggleCache{ctrl: ctrl}
	mock.recorder = &MockSetToggleCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSetToggleCache) EXPECT() *MockSetToggleCacheMockRecorder {
	return m.recorder
}

// Set mocks base method.
func (m *MockSetToggleCache) Set(ctx context.Context, toggle *entity.Toggle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, toggle)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockSetToggleCacheMockRecorder) Set(ctx, toggle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockSetToggleCache)(nil).Set), ctx, toggle)
}
