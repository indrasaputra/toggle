// toggle.proto defines service for toggle.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: proto/indrasaputra/toggle/v1/toggle.proto

package togglev1

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ToggleErrorCode enumerates toggle error code.
type ToggleErrorCode int32

const (
	// Default enum code according to
	// https://medium.com/@akhaku/protobuf-definition-best-practices-87f281576f31.
	ToggleErrorCode_TOGGLE_ERROR_CODE_UNSPECIFIED ToggleErrorCode = 0
	// Unexpected behavior occured in system.
	ToggleErrorCode_TOGGLE_ERROR_CODE_INTERNAL ToggleErrorCode = 1
	// Toggle instance is empty or nil.
	ToggleErrorCode_TOGGLE_ERROR_CODE_EMPTY_TOGGLE ToggleErrorCode = 2
	// Toggle already exists.
	// The uniqueness of a toggle is represented by its key.
	ToggleErrorCode_TOGGLE_ERROR_CODE_ALREADY_EXISTS ToggleErrorCode = 3
	// Toggle's key is invalid.
	// It can be triggered when the key doesn't contain character other than alphanumeric and dash.
	ToggleErrorCode_TOGGLE_ERROR_CODE_INVALID_KEY ToggleErrorCode = 4
	// Toggle's value (is_enabled field) is invalid.
	// The value must be boolean.
	ToggleErrorCode_TOGGLE_ERROR_CODE_INVALID_VALUE ToggleErrorCode = 5
	// Toggle not found in system.
	ToggleErrorCode_TOGGLE_ERROR_CODE_NOT_FOUND ToggleErrorCode = 6
	// Toggle's value (is_enabled field) is true and it can't be deleted.
	// It must be disabled (is_enabled set to false) first before deletion.
	ToggleErrorCode_TOGGLE_ERROR_CODE_PROHIBITED_TO_DELETE ToggleErrorCode = 7
)

// Enum value maps for ToggleErrorCode.
var (
	ToggleErrorCode_name = map[int32]string{
		0: "TOGGLE_ERROR_CODE_UNSPECIFIED",
		1: "TOGGLE_ERROR_CODE_INTERNAL",
		2: "TOGGLE_ERROR_CODE_EMPTY_TOGGLE",
		3: "TOGGLE_ERROR_CODE_ALREADY_EXISTS",
		4: "TOGGLE_ERROR_CODE_INVALID_KEY",
		5: "TOGGLE_ERROR_CODE_INVALID_VALUE",
		6: "TOGGLE_ERROR_CODE_NOT_FOUND",
		7: "TOGGLE_ERROR_CODE_PROHIBITED_TO_DELETE",
	}
	ToggleErrorCode_value = map[string]int32{
		"TOGGLE_ERROR_CODE_UNSPECIFIED":          0,
		"TOGGLE_ERROR_CODE_INTERNAL":             1,
		"TOGGLE_ERROR_CODE_EMPTY_TOGGLE":         2,
		"TOGGLE_ERROR_CODE_ALREADY_EXISTS":       3,
		"TOGGLE_ERROR_CODE_INVALID_KEY":          4,
		"TOGGLE_ERROR_CODE_INVALID_VALUE":        5,
		"TOGGLE_ERROR_CODE_NOT_FOUND":            6,
		"TOGGLE_ERROR_CODE_PROHIBITED_TO_DELETE": 7,
	}
)

func (x ToggleErrorCode) Enum() *ToggleErrorCode {
	p := new(ToggleErrorCode)
	*p = x
	return p
}

func (x ToggleErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ToggleErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_indrasaputra_toggle_v1_toggle_proto_enumTypes[0].Descriptor()
}

func (ToggleErrorCode) Type() protoreflect.EnumType {
	return &file_proto_indrasaputra_toggle_v1_toggle_proto_enumTypes[0]
}

func (x ToggleErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ToggleErrorCode.Descriptor instead.
func (ToggleErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_indrasaputra_toggle_v1_toggle_proto_rawDescGZIP(), []int{0}
}

// ToggleEventName enumerates toggle event name.
type ToggleEventName int32

const (
	// Default enum code according to
	// https://medium.com/@akhaku/protobuf-definition-best-practices-87f281576f31.
	ToggleEventName_TOGGLE_EVENT_NAME_UNSPECIFIED ToggleEventName = 0
	// Occur when toggle is created.
	ToggleEventName_TOGGLE_EVENT_NAME_CREATED ToggleEventName = 1
	// Occur when toggle is enabled.
	ToggleEventName_TOGGLE_EVENT_NAME_ENABLED ToggleEventName = 2
	// Occur when toggle is disabled.
	ToggleEventName_TOGGLE_EVENT_NAME_DISABLED ToggleEventName = 3
	// Occur when toggle is deleted.
	ToggleEventName_TOGGLE_EVENT_NAME_DELETED ToggleEventName = 4
)

// Enum value maps for ToggleEventName.
var (
	ToggleEventName_name = map[int32]string{
		0: "TOGGLE_EVENT_NAME_UNSPECIFIED",
		1: "TOGGLE_EVENT_NAME_CREATED",
		2: "TOGGLE_EVENT_NAME_ENABLED",
		3: "TOGGLE_EVENT_NAME_DISABLED",
		4: "TOGGLE_EVENT_NAME_DELETED",
	}
	ToggleEventName_value = map[string]int32{
		"TOGGLE_EVENT_NAME_UNSPECIFIED": 0,
		"TOGGLE_EVENT_NAME_CREATED":     1,
		"TOGGLE_EVENT_NAME_ENABLED":     2,
		"TOGGLE_EVENT_NAME_DISABLED":    3,
		"TOGGLE_EVENT_NAME_DELETED":     4,
	}
)

func (x ToggleEventName) Enum() *ToggleEventName {
	p := new(ToggleEventName)
	*p = x
	return p
}

func (x ToggleEventName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ToggleEventName) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_indrasaputra_toggle_v1_toggle_proto_enumTypes[1].Descriptor()
}

func (ToggleEventName) Type() protoreflect.EnumType {
	return &file_proto_indrasaputra_toggle_v1_toggle_proto_enumTypes[1]
}

func (x ToggleEventName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ToggleEventName.Descriptor instead.
func (ToggleEventName) EnumDescriptor() ([]byte, []int) {
	return file_proto_indrasaputra_toggle_v1_toggle_proto_rawDescGZIP(), []int{1}
}

// CreateToggleRequest represents request for create toggle.
type CreateToggleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// toggle represents toggle data.
	Toggle *Toggle `protobuf:"bytes,1,opt,name=toggle,proto3" json:"toggle,omitempty"`
}

func (x *CreateToggleRequest) Reset() {
	*x = CreateToggleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateToggleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateToggleRequest) ProtoMessage() {}

func (x *CreateToggleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateToggleRequest.ProtoReflect.Descriptor instead.
func (*CreateToggleRequest) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_toggle_v1_toggle_proto_rawDescGZIP(), []int{0}
}

func (x *CreateToggleRequest) GetToggle() *Toggle {
	if x != nil {
		return x.Toggle
	}
	return nil
}

// CreateToggleResponse represents response from create toggle.
type CreateToggleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateToggleResponse) Reset() {
	*x = CreateToggleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateToggleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateToggleResponse) ProtoMessage() {}

func (x *CreateToggleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateToggleResponse.ProtoReflect.Descriptor instead.
func (*CreateToggleResponse) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_toggle_v1_toggle_proto_rawDescGZIP(), []int{1}
}

// GetToggleByKeyRequest represents request for get toggle by key.
type GetToggleByKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key represents unique toggle's key.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *GetToggleByKeyRequest) Reset() {
	*x = GetToggleByKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetToggleByKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetToggleByKeyRequest) ProtoMessage() {}

func (x *GetToggleByKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetToggleByKeyRequest.ProtoReflect.Descriptor instead.
func (*GetToggleByKeyRequest) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_toggle_v1_toggle_proto_rawDescGZIP(), []int{2}
}

func (x *GetToggleByKeyRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// GetToggleByKeyResponse represents response from get toggle by key.
type GetToggleByKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// toggle represents toggle data.
	Toggle *Toggle `protobuf:"bytes,1,opt,name=toggle,proto3" json:"toggle,omitempty"`
}

func (x *GetToggleByKeyResponse) Reset() {
	*x = GetToggleByKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetToggleByKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetToggleByKeyResponse) ProtoMessage() {}

func (x *GetToggleByKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetToggleByKeyResponse.ProtoReflect.Descriptor instead.
func (*GetToggleByKeyResponse) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_toggle_v1_toggle_proto_rawDescGZIP(), []int{3}
}

func (x *GetToggleByKeyResponse) GetToggle() *Toggle {
	if x != nil {
		return x.Toggle
	}
	return nil
}

// GetAllTogglesRequest represents request for get all toggles.
type GetAllTogglesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllTogglesRequest) Reset() {
	*x = GetAllTogglesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllTogglesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllTogglesRequest) ProtoMessage() {}

func (x *GetAllTogglesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllTogglesRequest.ProtoReflect.Descriptor instead.
func (*GetAllTogglesRequest) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_toggle_v1_toggle_proto_rawDescGZIP(), []int{4}
}

// GetAllTogglesResponse represents response from get all toggles.
type GetAllTogglesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// toggles represents an array of toggle data.
	Toggles []*Toggle `protobuf:"bytes,1,rep,name=toggles,proto3" json:"toggles,omitempty"`
}

func (x *GetAllTogglesResponse) Reset() {
	*x = GetAllTogglesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllTogglesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllTogglesResponse) ProtoMessage() {}

func (x *GetAllTogglesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllTogglesResponse.ProtoReflect.Descriptor instead.
func (*GetAllTogglesResponse) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_toggle_v1_toggle_proto_rawDescGZIP(), []int{5}
}

func (x *GetAllTogglesResponse) GetToggles() []*Toggle {
	if x != nil {
		return x.Toggles
	}
	return nil
}

// EnableToggleRequest represents request for enable a toggle.
type EnableToggleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key represents unique toggle's key.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *EnableToggleRequest) Reset() {
	*x = EnableToggleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableToggleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableToggleRequest) ProtoMessage() {}

func (x *EnableToggleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableToggleRequest.ProtoReflect.Descriptor instead.
func (*EnableToggleRequest) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_toggle_v1_toggle_proto_rawDescGZIP(), []int{6}
}

func (x *EnableToggleRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// EnableToggleResponse represents request from enable a toggle.
type EnableToggleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnableToggleResponse) Reset() {
	*x = EnableToggleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableToggleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableToggleResponse) ProtoMessage() {}

func (x *EnableToggleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableToggleResponse.ProtoReflect.Descriptor instead.
func (*EnableToggleResponse) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_toggle_v1_toggle_proto_rawDescGZIP(), []int{7}
}

// DisableToggleRequest represents request for disable a toggle.
type DisableToggleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key represents unique toggle's key.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *DisableToggleRequest) Reset() {
	*x = DisableToggleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableToggleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableToggleRequest) ProtoMessage() {}

func (x *DisableToggleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableToggleRequest.ProtoReflect.Descriptor instead.
func (*DisableToggleRequest) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_toggle_v1_toggle_proto_rawDescGZIP(), []int{8}
}

func (x *DisableToggleRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// DisableToggleResponse represents request from disable a toggle.
type DisableToggleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisableToggleResponse) Reset() {
	*x = DisableToggleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableToggleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableToggleResponse) ProtoMessage() {}

func (x *DisableToggleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableToggleResponse.ProtoReflect.Descriptor instead.
func (*DisableToggleResponse) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_toggle_v1_toggle_proto_rawDescGZIP(), []int{9}
}

// DeleteToggleRequest represents request for delete a toggle.
type DeleteToggleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key represents unique toggle's key.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *DeleteToggleRequest) Reset() {
	*x = DeleteToggleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteToggleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteToggleRequest) ProtoMessage() {}

func (x *DeleteToggleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteToggleRequest.ProtoReflect.Descriptor instead.
func (*DeleteToggleRequest) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_toggle_v1_toggle_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteToggleRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// DeleteToggleResponse represents request from delete a toggle.
type DeleteToggleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteToggleResponse) Reset() {
	*x = DeleteToggleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteToggleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteToggleResponse) ProtoMessage() {}

func (x *DeleteToggleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteToggleResponse.ProtoReflect.Descriptor instead.
func (*DeleteToggleResponse) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_toggle_v1_toggle_proto_rawDescGZIP(), []int{11}
}

// Toggle represents a toggle data.
type Toggle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key represents a unique identifier of a toggle.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// is_enabled represents the toggle's usability status.
	IsEnabled bool `protobuf:"varint,2,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	// description represents a concise description of a toggle.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// created_at represents when the toggle was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// updated_at represents when the toggle was last updated.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Toggle) Reset() {
	*x = Toggle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Toggle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Toggle) ProtoMessage() {}

func (x *Toggle) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Toggle.ProtoReflect.Descriptor instead.
func (*Toggle) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_toggle_v1_toggle_proto_rawDescGZIP(), []int{12}
}

func (x *Toggle) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Toggle) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *Toggle) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Toggle) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Toggle) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// ToggleError represents message for any error happening in toggle.
type ToggleError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// error_code represents specific and unique error code for toggle.
	ErrorCode ToggleErrorCode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=proto.indrasaputra.toggle.v1.ToggleErrorCode" json:"error_code,omitempty"`
}

func (x *ToggleError) Reset() {
	*x = ToggleError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleError) ProtoMessage() {}

func (x *ToggleError) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleError.ProtoReflect.Descriptor instead.
func (*ToggleError) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_toggle_v1_toggle_proto_rawDescGZIP(), []int{13}
}

func (x *ToggleError) GetErrorCode() ToggleErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return ToggleErrorCode_TOGGLE_ERROR_CODE_UNSPECIFIED
}

// ToggleEvent represents an event of a toggle.
type ToggleEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name represents event's name.
	Name ToggleEventName `protobuf:"varint,1,opt,name=name,proto3,enum=proto.indrasaputra.toggle.v1.ToggleEventName" json:"name,omitempty"`
	// toggle represents the toggle in the event.
	Toggle *Toggle `protobuf:"bytes,2,opt,name=toggle,proto3" json:"toggle,omitempty"`
	// created_at represents when the event was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *ToggleEvent) Reset() {
	*x = ToggleEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleEvent) ProtoMessage() {}

func (x *ToggleEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleEvent.ProtoReflect.Descriptor instead.
func (*ToggleEvent) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_toggle_v1_toggle_proto_rawDescGZIP(), []int{14}
}

func (x *ToggleEvent) GetName() ToggleEventName {
	if x != nil {
		return x.Name
	}
	return ToggleEventName_TOGGLE_EVENT_NAME_UNSPECIFIED
}

func (x *ToggleEvent) GetToggle() *Toggle {
	if x != nil {
		return x.Toggle
	}
	return nil
}

func (x *ToggleEvent) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

var File_proto_indrasaputra_toggle_v1_toggle_proto protoreflect.FileDescriptor

var file_proto_indrasaputra_toggle_v1_toggle_proto_rawDesc = []byte{
	0x0a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70,
	0x75, 0x74, 0x72, 0x61, 0x2f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75, 0x74, 0x72, 0x61, 0x2e,
	0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x53, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3c, 0x0a, 0x06, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61,
	0x70, 0x75, 0x74, 0x72, 0x61, 0x2e, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x52, 0x06, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x22, 0x16,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x53, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0x92, 0x41,
	0x3e, 0x32, 0x1d, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x4a, 0x12, 0x22, 0x64, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x2d, 0x6d, 0x65, 0x6e, 0x75,
	0x62, 0x61, 0x72, 0x22, 0x78, 0x32, 0x80, 0x01, 0x01, 0xd2, 0x01, 0x03, 0x6b, 0x65, 0x79, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x22, 0x56, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c,
	0x0a, 0x06, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75,
	0x74, 0x72, 0x61, 0x2e, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x52, 0x06, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x22, 0x16, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x57, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a,
	0x07, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75,
	0x74, 0x72, 0x61, 0x2e, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x52, 0x07, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x73, 0x22, 0x6a, 0x0a,
	0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x1d, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x74,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x4a, 0x12, 0x22, 0x64, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e,
	0x2d, 0x6d, 0x65, 0x6e, 0x75, 0x62, 0x61, 0x72, 0x22, 0x78, 0x32, 0x80, 0x01, 0x01, 0xd2, 0x01,
	0x03, 0x6b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x16, 0x0a, 0x14, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x6b, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x1d, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6f,
	0x66, 0x20, 0x61, 0x20, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x4a, 0x12, 0x22, 0x64, 0x72, 0x6f,
	0x70, 0x64, 0x6f, 0x77, 0x6e, 0x2d, 0x6d, 0x65, 0x6e, 0x75, 0x62, 0x61, 0x72, 0x22, 0x78, 0x32,
	0x80, 0x01, 0x01, 0xd2, 0x01, 0x03, 0x6b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x17,
	0x0a, 0x15, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0x92, 0x41, 0x3e,
	0x32, 0x1d, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x4a,
	0x12, 0x22, 0x64, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x2d, 0x6d, 0x65, 0x6e, 0x75, 0x62,
	0x61, 0x72, 0x22, 0x78, 0x32, 0x80, 0x01, 0x01, 0xd2, 0x01, 0x03, 0x6b, 0x65, 0x79, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb3, 0x03, 0x0a, 0x06,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x12, 0x53, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x1d, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x61,
	0x20, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x4a, 0x12, 0x22, 0x64, 0x72, 0x6f, 0x70, 0x64, 0x6f,
	0x77, 0x6e, 0x2d, 0x6d, 0x65, 0x6e, 0x75, 0x62, 0x61, 0x72, 0x22, 0x78, 0x32, 0x80, 0x01, 0x01,
	0xd2, 0x01, 0x03, 0x6b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x51, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x32, 0x92, 0x41, 0x2b, 0x32, 0x19, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x27, 0x73, 0x20, 0x75,
	0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4a,
	0x04, 0x74, 0x72, 0x75, 0x65, 0xa2, 0x02, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0xe2,
	0x41, 0x01, 0x03, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x7f,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x5d, 0x92, 0x41, 0x5a, 0x32, 0x21, 0x41, 0x20, 0x63, 0x6f, 0x6e, 0x63,
	0x69, 0x73, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6f, 0x66, 0x20, 0x61, 0x20, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x4a, 0x2f, 0x22, 0x74, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x69, 0x6e, 0x67,
	0x2f, 0x75, 0x6e, 0x73, 0x68, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x64,
	0x6f, 0x77, 0x6e, 0x20, 0x6d, 0x65, 0x6e, 0x75, 0x62, 0x61, 0x72, 0x22, 0x78, 0xff, 0x01, 0x80,
	0x01, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3f, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x5b, 0x0a, 0x0b, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x4c, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64,
	0x72, 0x61, 0x73, 0x61, 0x70, 0x75, 0x74, 0x72, 0x61, 0x2e, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8d,
	0x02, 0x0a, 0x0b, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x7f,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75, 0x74, 0x72,
	0x61, 0x2e, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x3c, 0x92, 0x41, 0x39,
	0x32, 0x20, 0x41, 0x20, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x73, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x4a, 0x0f, 0x22, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x44, 0x22, 0x78, 0xff, 0x01, 0x80, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3c, 0x0a, 0x06, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70,
	0x75, 0x74, 0x72, 0x61, 0x2e, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x52, 0x06, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x12, 0x3f, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2,
	0x41, 0x01, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x2a, 0xb3,
	0x02, 0x0a, 0x0f, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59,
	0x5f, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x4f, 0x47,
	0x47, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41,
	0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x03, 0x12,
	0x21, 0x0a, 0x1d, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4b, 0x45, 0x59,
	0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x4f, 0x47, 0x47, 0x4c,
	0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x2a, 0x0a, 0x26, 0x54, 0x4f, 0x47, 0x47,
	0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x48, 0x49, 0x42, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x07, 0x2a, 0xb1, 0x01, 0x0a, 0x0f, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x4f, 0x47, 0x47,
	0x4c, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x54,
	0x4f, 0x47, 0x47, 0x4c, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x4f,
	0x47, 0x47, 0x4c, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x4f, 0x47,
	0x47, 0x4c, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x4f, 0x47,
	0x47, 0x4c, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x32, 0x96, 0x06, 0x0a, 0x14, 0x54, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x92, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61,
	0x73, 0x61, 0x70, 0x75, 0x74, 0x72, 0x61, 0x2e, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e,
	0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75, 0x74, 0x72, 0x61, 0x2e, 0x74, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x15, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x73, 0x3a, 0x06,
	0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x0c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75, 0x74, 0x72, 0x61, 0x2e, 0x74, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75, 0x74, 0x72, 0x61, 0x2e,
	0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x1a, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x7d, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x9b, 0x01, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x12, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61,
	0x73, 0x61, 0x70, 0x75, 0x74, 0x72, 0x61, 0x2e, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69,
	0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75, 0x74, 0x72, 0x61, 0x2e, 0x74, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x1a, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x73,
	0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x7d, 0x2f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x90,
	0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x12,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70,
	0x75, 0x74, 0x72, 0x61, 0x2e, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61,
	0x73, 0x61, 0x70, 0x75, 0x74, 0x72, 0x61, 0x2e, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x2a, 0x11,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6b, 0x65, 0x79,
	0x7d, 0x1a, 0x9d, 0x01, 0x92, 0x41, 0x99, 0x01, 0x12, 0x96, 0x01, 0x54, 0x68, 0x69, 0x73, 0x20,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73,
	0x20, 0x62, 0x61, 0x73, 0x69, 0x63, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x20, 0x6f,
	0x72, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67,
	0x20, 0x75, 0x73, 0x65, 0x20, 0x63, 0x61, 0x73, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x77, 0x6f,
	0x72, 0x6b, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d,
	0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x41, 0x20, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x20,
	0x69, 0x73, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x62,
	0x79, 0x20, 0x61, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x61, 0x73, 0x20, 0x69, 0x74, 0x73, 0x20, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2e, 0x32, 0xdc, 0x03, 0x0a, 0x12, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75, 0x74, 0x72, 0x61,
	0x2e, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61,
	0x70, 0x75, 0x74, 0x72, 0x61, 0x2e, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6b, 0x65, 0x79,
	0x7d, 0x12, 0x8d, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x73, 0x12, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64, 0x72,
	0x61, 0x73, 0x61, 0x70, 0x75, 0x74, 0x72, 0x61, 0x2e, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75, 0x74, 0x72, 0x61, 0x2e, 0x74, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x73, 0x1a, 0x9c, 0x01, 0x92, 0x41, 0x98, 0x01, 0x12, 0x95, 0x01, 0x54, 0x68, 0x69, 0x73, 0x20,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73,
	0x20, 0x62, 0x61, 0x73, 0x69, 0x63, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x6f, 0x72, 0x20,
	0x64, 0x61, 0x74, 0x61, 0x2d, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x69, 0x6e, 0x67, 0x20,
	0x75, 0x73, 0x65, 0x20, 0x63, 0x61, 0x73, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x77, 0x6f, 0x72,
	0x6b, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x74,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x41, 0x20, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x20, 0x69,
	0x73, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79,
	0x20, 0x61, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x61, 0x73, 0x20, 0x69, 0x74, 0x73, 0x20, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e,
	0x42, 0xa3, 0x02, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75, 0x74, 0x72, 0x61, 0x2f, 0x74, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73,
	0x61, 0x70, 0x75, 0x74, 0x72, 0x61, 0x2f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2f, 0x76, 0x31,
	0x3b, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x76, 0x31, 0x92, 0x41, 0xd9, 0x01, 0x12, 0x9f, 0x01,
	0x0a, 0x12, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x20, 0x41, 0x50, 0x49, 0x22, 0x30, 0x0a, 0x0d, 0x49, 0x6e, 0x64, 0x72, 0x61, 0x20, 0x53, 0x61,
	0x70, 0x75, 0x74, 0x72, 0x61, 0x12, 0x1f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73,
	0x61, 0x70, 0x75, 0x74, 0x72, 0x61, 0x2a, 0x50, 0x0a, 0x14, 0x42, 0x53, 0x44, 0x20, 0x33, 0x2d,
	0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x38,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75, 0x74, 0x72, 0x61, 0x2f,
	0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x6d, 0x61, 0x69, 0x6e,
	0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x32, 0x05, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0x1a,
	0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x38, 0x30, 0x38, 0x31, 0x2a,
	0x01, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_indrasaputra_toggle_v1_toggle_proto_rawDescOnce sync.Once
	file_proto_indrasaputra_toggle_v1_toggle_proto_rawDescData = file_proto_indrasaputra_toggle_v1_toggle_proto_rawDesc
)

func file_proto_indrasaputra_toggle_v1_toggle_proto_rawDescGZIP() []byte {
	file_proto_indrasaputra_toggle_v1_toggle_proto_rawDescOnce.Do(func() {
		file_proto_indrasaputra_toggle_v1_toggle_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_indrasaputra_toggle_v1_toggle_proto_rawDescData)
	})
	return file_proto_indrasaputra_toggle_v1_toggle_proto_rawDescData
}

var file_proto_indrasaputra_toggle_v1_toggle_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_proto_indrasaputra_toggle_v1_toggle_proto_goTypes = []interface{}{
	(ToggleErrorCode)(0),           // 0: proto.indrasaputra.toggle.v1.ToggleErrorCode
	(ToggleEventName)(0),           // 1: proto.indrasaputra.toggle.v1.ToggleEventName
	(*CreateToggleRequest)(nil),    // 2: proto.indrasaputra.toggle.v1.CreateToggleRequest
	(*CreateToggleResponse)(nil),   // 3: proto.indrasaputra.toggle.v1.CreateToggleResponse
	(*GetToggleByKeyRequest)(nil),  // 4: proto.indrasaputra.toggle.v1.GetToggleByKeyRequest
	(*GetToggleByKeyResponse)(nil), // 5: proto.indrasaputra.toggle.v1.GetToggleByKeyResponse
	(*GetAllTogglesRequest)(nil),   // 6: proto.indrasaputra.toggle.v1.GetAllTogglesRequest
	(*GetAllTogglesResponse)(nil),  // 7: proto.indrasaputra.toggle.v1.GetAllTogglesResponse
	(*EnableToggleRequest)(nil),    // 8: proto.indrasaputra.toggle.v1.EnableToggleRequest
	(*EnableToggleResponse)(nil),   // 9: proto.indrasaputra.toggle.v1.EnableToggleResponse
	(*DisableToggleRequest)(nil),   // 10: proto.indrasaputra.toggle.v1.DisableToggleRequest
	(*DisableToggleResponse)(nil),  // 11: proto.indrasaputra.toggle.v1.DisableToggleResponse
	(*DeleteToggleRequest)(nil),    // 12: proto.indrasaputra.toggle.v1.DeleteToggleRequest
	(*DeleteToggleResponse)(nil),   // 13: proto.indrasaputra.toggle.v1.DeleteToggleResponse
	(*Toggle)(nil),                 // 14: proto.indrasaputra.toggle.v1.Toggle
	(*ToggleError)(nil),            // 15: proto.indrasaputra.toggle.v1.ToggleError
	(*ToggleEvent)(nil),            // 16: proto.indrasaputra.toggle.v1.ToggleEvent
	(*timestamppb.Timestamp)(nil),  // 17: google.protobuf.Timestamp
}
var file_proto_indrasaputra_toggle_v1_toggle_proto_depIdxs = []int32{
	14, // 0: proto.indrasaputra.toggle.v1.CreateToggleRequest.toggle:type_name -> proto.indrasaputra.toggle.v1.Toggle
	14, // 1: proto.indrasaputra.toggle.v1.GetToggleByKeyResponse.toggle:type_name -> proto.indrasaputra.toggle.v1.Toggle
	14, // 2: proto.indrasaputra.toggle.v1.GetAllTogglesResponse.toggles:type_name -> proto.indrasaputra.toggle.v1.Toggle
	17, // 3: proto.indrasaputra.toggle.v1.Toggle.created_at:type_name -> google.protobuf.Timestamp
	17, // 4: proto.indrasaputra.toggle.v1.Toggle.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 5: proto.indrasaputra.toggle.v1.ToggleError.error_code:type_name -> proto.indrasaputra.toggle.v1.ToggleErrorCode
	1,  // 6: proto.indrasaputra.toggle.v1.ToggleEvent.name:type_name -> proto.indrasaputra.toggle.v1.ToggleEventName
	14, // 7: proto.indrasaputra.toggle.v1.ToggleEvent.toggle:type_name -> proto.indrasaputra.toggle.v1.Toggle
	17, // 8: proto.indrasaputra.toggle.v1.ToggleEvent.created_at:type_name -> google.protobuf.Timestamp
	2,  // 9: proto.indrasaputra.toggle.v1.ToggleCommandService.CreateToggle:input_type -> proto.indrasaputra.toggle.v1.CreateToggleRequest
	8,  // 10: proto.indrasaputra.toggle.v1.ToggleCommandService.EnableToggle:input_type -> proto.indrasaputra.toggle.v1.EnableToggleRequest
	10, // 11: proto.indrasaputra.toggle.v1.ToggleCommandService.DisableToggle:input_type -> proto.indrasaputra.toggle.v1.DisableToggleRequest
	12, // 12: proto.indrasaputra.toggle.v1.ToggleCommandService.DeleteToggle:input_type -> proto.indrasaputra.toggle.v1.DeleteToggleRequest
	4,  // 13: proto.indrasaputra.toggle.v1.ToggleQueryService.GetToggleByKey:input_type -> proto.indrasaputra.toggle.v1.GetToggleByKeyRequest
	6,  // 14: proto.indrasaputra.toggle.v1.ToggleQueryService.GetAllToggles:input_type -> proto.indrasaputra.toggle.v1.GetAllTogglesRequest
	3,  // 15: proto.indrasaputra.toggle.v1.ToggleCommandService.CreateToggle:output_type -> proto.indrasaputra.toggle.v1.CreateToggleResponse
	9,  // 16: proto.indrasaputra.toggle.v1.ToggleCommandService.EnableToggle:output_type -> proto.indrasaputra.toggle.v1.EnableToggleResponse
	11, // 17: proto.indrasaputra.toggle.v1.ToggleCommandService.DisableToggle:output_type -> proto.indrasaputra.toggle.v1.DisableToggleResponse
	13, // 18: proto.indrasaputra.toggle.v1.ToggleCommandService.DeleteToggle:output_type -> proto.indrasaputra.toggle.v1.DeleteToggleResponse
	5,  // 19: proto.indrasaputra.toggle.v1.ToggleQueryService.GetToggleByKey:output_type -> proto.indrasaputra.toggle.v1.GetToggleByKeyResponse
	7,  // 20: proto.indrasaputra.toggle.v1.ToggleQueryService.GetAllToggles:output_type -> proto.indrasaputra.toggle.v1.GetAllTogglesResponse
	15, // [15:21] is the sub-list for method output_type
	9,  // [9:15] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_proto_indrasaputra_toggle_v1_toggle_proto_init() }
func file_proto_indrasaputra_toggle_v1_toggle_proto_init() {
	if File_proto_indrasaputra_toggle_v1_toggle_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateToggleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateToggleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetToggleByKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetToggleByKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllTogglesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllTogglesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableToggleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableToggleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableToggleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableToggleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteToggleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteToggleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Toggle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_indrasaputra_toggle_v1_toggle_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_proto_indrasaputra_toggle_v1_toggle_proto_goTypes,
		DependencyIndexes: file_proto_indrasaputra_toggle_v1_toggle_proto_depIdxs,
		EnumInfos:         file_proto_indrasaputra_toggle_v1_toggle_proto_enumTypes,
		MessageInfos:      file_proto_indrasaputra_toggle_v1_toggle_proto_msgTypes,
	}.Build()
	File_proto_indrasaputra_toggle_v1_toggle_proto = out.File
	file_proto_indrasaputra_toggle_v1_toggle_proto_rawDesc = nil
	file_proto_indrasaputra_toggle_v1_toggle_proto_goTypes = nil
	file_proto_indrasaputra_toggle_v1_toggle_proto_depIdxs = nil
}
