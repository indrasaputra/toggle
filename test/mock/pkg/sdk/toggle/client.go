// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/sdk/toggle/client.go

// Package mock_toggle is a generated GoMock package.
package mock_toggle

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCircuitBreaker is a mock of CircuitBreaker interface.
type MockCircuitBreaker struct {
	ctrl     *gomock.Controller
	recorder *MockCircuitBreakerMockRecorder
}

// MockCircuitBreakerMockRecorder is the mock recorder for MockCircuitBreaker.
type MockCircuitBreakerMockRecorder struct {
	mock *MockCircuitBreaker
}

// NewMockCircuitBreaker creates a new mock instance.
func NewMockCircuitBreaker(ctrl *gomock.Controller) *MockCircuitBreaker {
	mock := &MockCircuitBreaker{ctrl: ctrl}
	mock.recorder = &MockCircuitBreakerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCircuitBreaker) EXPECT() *MockCircuitBreakerMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockCircuitBreaker) Execute(arg0 func() (interface{}, error)) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockCircuitBreakerMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCircuitBreaker)(nil).Execute), arg0)
}
