name: Test

on: [push, pull_request]
  
jobs:
  download-module:
    name: Download go module
    runs-on: ubuntu-latest
    steps:
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.17.x
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Download module
        run: go mod download
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: go-module-${{ github.repository }}-${{ github.sha }}
          restore-keys: |
            go-module-${{ github.repository }}-${{ github.sha }}
  
  code-linter:
    name: Lint all codes and file format
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository 
        uses: actions/checkout@v2
      - name: Validate migration file's name      
        run: make validate.migration
      - name: Lint proto files
        uses: plexsystems/protolint-action@v0.2.0
        with:
          configDirectory: .      
      - name: Lint using golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.42.1

  import-linter:
    name: Lint import block
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    container:
      image: indrasaputra/protogen:2021-09-07
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Check import blocks
        run: |
          make format
          make check.import
  
  security-checking:
    name: Semgrep scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: returntocorp/semgrep-action@v1
        with:
          publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}

  unit-test:
    name: Unit test and coverage
    needs: [download-module, code-linter, import-linter, security-checking]
    runs-on: ubuntu-latest
    steps:
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.17.x
      - name: Clone repository
        uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: go-module-${{ github.repository }}-${{ github.sha }}
          restore-keys: |
            go-module-${{ github.repository }}-${{ github.sha }}
      - name: Run unit test and coverage 
        run: make test.cover
      - name: Push coverage result to Codecov
        uses: codecov/codecov-action@v1.0.13

  compile-binary:
    name: Compile go binary
    if: github.event_name == 'push'
    needs: [download-module, code-linter, import-linter, security-checking]
    runs-on: ubuntu-latest
    steps:
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.17.x
      - name: Clone repository
        uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: go-module-${{ github.repository }}-${{ github.sha }}
          restore-keys: |
            go-module-${{ github.repository }}-${{ github.sha }}
      - name: Compile go binary
        run: |
          make compile
      - name: Upload go binary
        uses: actions/upload-artifact@v2
        with:
          name: go-binary-toggle-${{ github.sha }}
          path: toggle
          retention-days: 1

  build-docker:
    name: Build and push docker image
    if: github.event_name == 'push'
    needs: [compile-binary, unit-test]
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Download go binary
        uses: actions/download-artifact@v2
        with:
          name: go-binary-toggle-${{ github.sha }}
      - name: Setup docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ github.repository }}
          flavor: |
            latest=true
          tags: |
            type=raw,value=${{ github.sha }}  
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  integration-test:
    name: Integration test
    if: github.event_name == 'push'
    needs: [build-docker]
    runs-on: ubuntu-latest
    container:
      image: indrasaputra/golang:2021-09-07
    services:
      postgres:
        image: postgres:13.4-alpine
        env:
          POSTGRES_USER: postgresuser
          POSTGRES_PASSWORD: postgrespassword
          POSTGRES_DB: toggle
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:6.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      toggle:
        image: ${{ github.repository }}:${{ github.sha }}
        env:
          PORT_GRPC: 8080
          PORT_GRPC_GATEWAY: 8081
          POSTGRES_HOST: postgres
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgresuser
          POSTGRES_PASSWORD: postgrespassword
          POSTGRES_NAME: toggle
          POSTGRES_MAX_OPEN_CONNS: 50
          POSTGRES_MAX_CONN_LIFETIME: 10m
          POSTGRES_MAX_IDLE_LIFETIME: 5m
          POSTGRES_SSL_MODE: disable
          REDIS_ADDRESS: redis:6379
          REDIS_TTL: 5
          JAEGER_ENABLED: false
        ports:
          - 8080:8080
          - 8081:8081
        options: >-
          --health-cmd "./wait-for -t 4 localhost:8081"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Run integration test using godog
        env:
          SERVER_URL: http://toggle:8081/v1/toggles
          POSTGRES_HOST: postgres
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgresuser
          POSTGRES_PASSWORD: postgrespassword
          POSTGRES_NAME: toggle
          POSTGRES_SSL_MODE: disable
        run: |
          make migrate url="postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_NAME}?sslmode=${POSTGRES_SSL_MODE}"
          make test.integration
