// toggle.proto defines service for toggle.

syntax = "proto3";

package toggle.v1;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/indrasaputra/toggle/proto/toggle/v1;togglev1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info : {
    title : "Feature-Toggle API",
    version : "1.0.0",
    contact : {
      name : "Indra Saputra",
      url : "https://github.com/indrasaputra",
    },
    license : {
      name : "BSD 3-Clause License",
      url : "https://github.com/indrasaputra/toggle/blob/main/LICENSE",
    },
  },
  host : "localhost:8081",
  schemes : HTTP,
  consumes : "application/json",
  produces : "application/json",
};

// ToggleCommandService provides state-change service for toggle.
service ToggleCommandService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description : "This service provides basic command or state-changing use cases to work with "
                  "feature-toggle."
                  "A toggle is represented by a key as its unique identifier."
  };

  // Create a new toggle.
  //
  // This endpoint creates a new toggle with provided key and description.
  // The description can be left empty, but the key must exists.
  // The key must be unique and it can only contain alphanumeric and dash.
  // The key will be converted to lower case.
  rpc CreateToggle(CreateToggleRequest) returns (CreateToggleResponse) {
    option (google.api.http) = {
      post : "/v1/toggles",
      body : "toggle"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id : "CreateToggle",
      tags : "Toggle"
    };
  }

  // Enable a toggle.
  //
  // This endpoint set toggle's usability to active.
  // Its *isEnabled* attribute will be set to true.
  rpc EnableToggle(EnableToggleRequest) returns (EnableToggleResponse) {
    option (google.api.http) = {
      put : "/v1/toggles/{key}/enable",
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id : "EnableToggle",
      tags : "Toggle"
    };
  }

  // Disable a toggle.
  //
  // This endpoint set toggle's usability to inactive.
  // Its *isEnabled* attribute will be set to false.
  rpc DisableToggle(DisableToggleRequest) returns (DisableToggleResponse) {
    option (google.api.http) = {
      put : "/v1/toggles/{key}/disable",
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id : "DisableToggle",
      tags : "Toggle"
    };
  }

  // Delete a toggle.
  //
  // This endpoint deletes a toggle by its key.
  // The operation is hard-delete, thus the toggle will be gone forever.
  rpc DeleteToggle(DeleteToggleRequest) returns (DeleteToggleResponse) {
    option (google.api.http) = {
      delete : "/v1/toggles/{key}",
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id : "DeleteToggle",
      tags : "Toggle"
    };
  }
}

// ToggleQueryService provides query service for toggle.
service ToggleQueryService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description : "This service provides basic query or data-retrieving use cases to work with "
                  "feature-toggle."
                  "A toggle is represented by a key as its unique identifier."
  };

  // Get a toggle.
  //
  // This endpoint gets a single toggle by its key.
  rpc GetToggleByKey(GetToggleByKeyRequest) returns (GetToggleByKeyResponse) {
    option (google.api.http) = {
      get : "/v1/toggles/{key}",
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id : "GetToggleByKey",
      tags : "Toggle"
    };
  }

  // Get many toggles.
  //
  // This endpoint gets all available toggles in the system.
  // Currently, it only retrieves 10 toggles at most.
  rpc GetAllToggles(GetAllTogglesRequest) returns (GetAllTogglesResponse) {
    option (google.api.http) = {
      get : "/v1/toggles",
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id : "GetAllToggles",
      tags : "Toggle"
    };
  }
}

// CreateToggleRequest represents request for create toggle.
message CreateToggleRequest {
  // toggle represents toggle data.
  Toggle toggle = 1;
}

// CreateToggleResponse represents response from create toggle.
message CreateToggleResponse {
}

// GetToggleByKeyRequest represents request for get toggle by key.
message GetToggleByKeyRequest {
  // key represents unique toggle's key.
  string key = 1 [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    required : "key",
    description : "Unique identifier of a toggle",
    min_length : 1,
    max_length : 50,
    example : "\"dropdown-menubar\"",
  } ];
}

// GetToggleByKeyResponse represents response from get toggle by key.
message GetToggleByKeyResponse {
  // toggle represents toggle data.
  Toggle toggle = 1;
}

// GetAllTogglesRequest represents request for get all toggles.
message GetAllTogglesRequest {
}

// GetAllTogglesResponse represents response from get all toggles.
message GetAllTogglesResponse {
  // toggles represents an array of toggle data.
  repeated Toggle toggles = 1;
}

// EnableToggleRequest represents request for enable a toggle.
message EnableToggleRequest {
  // key represents unique toggle's key.
  string key = 1 [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    required : "key",
    description : "Unique identifier of a toggle",
    min_length : 1,
    max_length : 50,
    example : "\"dropdown-menubar\"",
  } ];
}

// EnableToggleResponse represents request from enable a toggle.
message EnableToggleResponse {
}

// DisableToggleRequest represents request for disable a toggle.
message DisableToggleRequest {
  // key represents unique toggle's key.
  string key = 1 [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    required : "key",
    description : "Unique identifier of a toggle",
    min_length : 1,
    max_length : 50,
    example : "\"dropdown-menubar\"",
  } ];
}

// DisableToggleResponse represents request from disable a toggle.
message DisableToggleResponse {
}

// DeleteToggleRequest represents request for delete a toggle.
message DeleteToggleRequest {
  // key represents unique toggle's key.
  string key = 1 [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    required : "key",
    description : "Unique identifier of a toggle",
    min_length : 1,
    max_length : 50,
    example : "\"dropdown-menubar\"",
  } ];
}

// DeleteToggleResponse represents request from delete a toggle.
message DeleteToggleResponse {
}

// Toggle represents a toggle data.
message Toggle {
  // key represents a unique identifier of a toggle.
  string key = 1 [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    required : "key",
    description : "Unique identifier of a toggle",
    min_length : 1,
    max_length : 50,
    example : "\"dropdown-menubar\"",
  } ];

  // is_enabled represents the toggle's usability status.
  bool is_enabled = 2 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description : "Toggle's usability status",
      format : "boolean",
      example : "true",
    }
  ];

  // description represents a concise description of a toggle.
  string description = 3 [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "A concise description of a toggle",
    min_length : 1,
    max_length : 255,
    example : "\"toggle for showing/unshowing dropdown menubar\"",
  } ];

  // created_at represents when the toggle was created.
  google.protobuf.Timestamp created_at = 4 [ (google.api.field_behavior) = OUTPUT_ONLY ];
  // updated_at represents when the toggle was last updated.
  google.protobuf.Timestamp updated_at = 5 [ (google.api.field_behavior) = OUTPUT_ONLY ];
}

// ToggleError represents message for any error happening in toggle.
message ToggleError {
  // error_code represents specific and unique error code for toggle.
  ToggleErrorCode error_code = 1;
}

// ToggleErrorCode enumerates toggle error code.
enum ToggleErrorCode {
  // Default enum code according to
  // https://medium.com/@akhaku/protobuf-definition-best-practices-87f281576f31.
  TOGGLE_ERROR_CODE_UNSPECIFIED = 0;

  // Unexpected behavior occured in system.
  TOGGLE_ERROR_CODE_INTERNAL = 1;

  // Toggle instance is empty or nil.
  TOGGLE_ERROR_CODE_EMPTY_TOGGLE = 2;

  // Toggle already exists.
  // The uniqueness of a toggle is represented by its key.
  TOGGLE_ERROR_CODE_ALREADY_EXISTS = 3;

  // Toggle's key is invalid.
  // It can be triggered when the key doesn't contain character other than alphanumeric and dash.
  TOGGLE_ERROR_CODE_INVALID_KEY = 4;

  // Toggle's value (is_enabled field) is invalid.
  // The value must be boolean.
  TOGGLE_ERROR_CODE_INVALID_VALUE = 5;

  // Toggle not found in system.
  TOGGLE_ERROR_CODE_NOT_FOUND = 6;

  // Toggle's value (is_enabled field) is true and it can't be deleted.
  // It must be disabled (is_enabled set to false) first before deletion.
  TOGGLE_ERROR_CODE_PROHIBITED_TO_DELETE = 7;
}

// ToggleEventName enumerates toggle event name.
enum ToggleEventName {
  // Default enum code according to
  // https://medium.com/@akhaku/protobuf-definition-best-practices-87f281576f31.
  TOGGLE_EVENT_NAME_UNSPECIFIED = 0;

  // Occur when toggle is created.
  TOGGLE_EVENT_NAME_CREATED = 1;

  // Occur when toggle is enabled.
  TOGGLE_EVENT_NAME_ENABLED = 2;

  // Occur when toggle is disabled.
  TOGGLE_EVENT_NAME_DISABLED = 3;

  // Occur when toggle is deleted.
  TOGGLE_EVENT_NAME_DELETED = 4;
}

// ToggleEvent represents an event of a toggle.
message ToggleEvent {
  // name represents event's name.
  ToggleEventName name = 1 [ (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description : "A concise identifier of an event",
    min_length : 1,
    max_length : 255,
    example : "\"EVENT_CREATED\"",
  } ];

  // toggle represents the toggle in the event.
  Toggle toggle = 2;

  // created_at represents when the event was created.
  google.protobuf.Timestamp created_at = 3 [ (google.api.field_behavior) = OUTPUT_ONLY ];
}
